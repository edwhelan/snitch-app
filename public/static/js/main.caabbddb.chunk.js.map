{"version":3,"sources":["components/UpvotedImages.js","components/DownvotedImages.js","components/NewImages.js","components/ImageColumns.js","components/Login.js","components/Logout.js","components/NewUser.js","components/Registration.js","App.js","serviceWorker.js","index.js"],"names":["UpvotedImages","props","newList","data","sort","a","b","votevalue","react_default","createElement","className","map","item","key","id","src","image","onClick","handleClick","class","downClick","DownvotedImages","NewImages","newImages","ImageColumns","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_doesVoteExist","user_id","fetch","method","headers","Content-Type","body","JSON","stringify","then","r","json","_upvoteImage","console","log","concat","loggedInUser","state","loggedIn","didVote","_downvoteImage","list","_this2","interval","setInterval","filter","i","length","setState","toConsumableArray","forEach","catch","err","components_NewImages","components_UpvotedImages","components_DownvotedImages","Component","Login","action","type","name","required","value","Logout","NewUser","Registration","_isClickedLogin","loginOpen","_isClickedRegister","registerOpen","displayname","components_Logout","Fragment","components_Login","components_NewUser","App","components_Registration","components_ImageColumns","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.caabbddb.chunk.js","sourcesContent":["import React from 'react';\n\n//Load images based off their VoteValue descending\nconst UpvotedImages = (props) => {\n  const newList = props.data.sort((a, b) => b.votevalue - a.votevalue)\n\n  return (\n    <div className='upvoted-image-column'>\n      <span className='column-text'>Nice!</span>\n      {newList.map(item => {\n\n        return (\n          <div className='fancy-border'>\n            <img className='upvoted-image' key={item.id} src={item.image} />\n            <div className='button-row'>\n              <button\n                onClick={() => {\n                  props.handleClick(item.id);\n                }\n                }>\n                <i class=\"fas fa-arrow-up\"></i>\n              </button>\n              {item.votevalue}\n              <button\n                onClick={() => {\n                  props.downClick(item.id);\n                }\n                }>\n                <i class=\"fas fa-arrow-down\"></i>\n              </button>\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default UpvotedImages","import React from 'react';\n\n//Load images based off their VoteValue descending\nconst DownvotedImages = (props) => {\n  const newList = props.data.sort((a, b) => a.votevalue - b.votevalue)\n\n  return (\n    <div className='upvoted-image-column'>\n      <span className='column-text'>Naughty!</span>\n      {newList.map(item => {\n\n        return (\n          <div className='fancy-border'>\n            <img className='upvoted-image' key={item.id} src={item.image} />\n            <div className='button-row'>\n              <button\n                onClick={() => {\n                  props.handleClick(item.id);\n                }\n                }>\n                <i class=\"fas fa-arrow-up\"></i>\n              </button>\n              {item.votevalue}\n              <button\n                onClick={() => {\n                  props.downClick(item.id);\n                }\n                }>\n                <i class=\"fas fa-arrow-down\"></i>\n              </button>\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default DownvotedImages","import React from 'react';\n\nconst NewImages = (props) => {\n  const newImages = props.data.sort((a, b) => b.id - a.id);\n\n  return (\n    <div className='upvoted-image-column'>\n      <span className='column-text'>New!</span>\n      {newImages.map(item => {\n        return (\n          <div className='fancy-border'>\n            <img className='upvoted-image' key={item.id} src={item.image} />\n            <div className='button-row'>\n              <button\n                onClick={() => {\n                  props.handleClick(item.id);\n                }\n                }>\n                <i class=\"fas fa-arrow-up\"></i>\n              </button>\n              {item.votevalue}\n              <button\n                onClick={() => {\n                  props.downClick(item.id);\n                }\n                }>\n                <i class=\"fas fa-arrow-down\"></i>\n              </button>\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default NewImages;","import React, { Component } from 'react';\n\n\n\n//Import children components\nimport UpvotedImages from './UpvotedImages';\nimport DownvotedImages from './DownvotedImages';\nimport NewImages from './NewImages';\n\nclass ImageColumns extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [],\n      loggedIn: false,\n      user_id: 0,\n    }\n  }\n  //load image data from backend and display in column format\n  componentDidMount() {\n    console.log('fetching data')\n    const getAllData = () => {\n      fetch(`/api/getList`)\n        .then(r => {\n          return (r.json())\n        }).then(data => {\n          data.filter(item => {\n            return this.state.list.filter(i => {\n              return i.id === item.id\n            }).length === 0\n          })\n            .map(item => {\n              this.setState({\n                list: [...this.state.list, item]\n              })\n            })\n          data.filter(item => {\n            return this.state.list.filter(i => {\n              return i.id === item.id\n            }).length !== 0\n          }).forEach(item => {\n            this.setState({\n              list: this.state.list.map(i => {\n                if (i.id === item.id) {\n                  return item;\n                } else {\n                  return i\n                }\n              })\n            })\n          })\n        })\n    }\n    const loginCheck = () => {\n      fetch('/api/loggedin')\n        .catch(err => {\n          console.log(err)\n        })\n        .then(r => {\n          return (r.json())\n        })\n        .then(data => {\n          if (data) {\n            this.setState({\n              loggedIn: true,\n              user_id: data.id\n            })\n          } else {\n            console.log('move along');\n          }\n        })\n    }\n\n    this.interval = setInterval(() => getAllData(), loginCheck(), 10000);\n  }\n\n  render() {\n    return (\n      <div className='image-container'>\n        <NewImages handleClick={this._upvoteImage} downClick={this._downvoteImage} data={this.state.list} />\n        <UpvotedImages handleClick={this._upvoteImage} downClick={this._downvoteImage} data={this.state.list} />\n        <DownvotedImages handleClick={this._upvoteImage} downClick={this._downvoteImage} data={this.state.list} />\n      </div>\n\n    )\n  }\n\n  // check to see if vote exists already\n  _doesVoteExist = (user_id, id) => {\n    return fetch('/api/voteExist', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ user_id, id }),\n    }).then(r => {\n      return (r.json())\n    })\n  }\n\n  // function to pass into components to allow users \n  //to increase vote value by 1 through a POST req\n  _upvoteImage = (id) => {\n    console.log(`the child said it was ${id}`)\n    let loggedInUser = this.state.user_id\n    //if user is logged in?\n    if (this.state.loggedIn) {\n      //check to see if the user has voted already\n      this._doesVoteExist(this.state.user_id, id)\n        .then(didVote => {\n          if (didVote === 1) {\n            //vote does exist do nothing\n            console.log(`if statement:${didVote}`)\n          } else {\n            //vote doesnt exist\n            //let user vote =>\n            fetch('/api/upvoteimage', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({ id, loggedInUser }),\n            });\n          }\n        })\n    } else {\n      console.log('You are not logged in')\n    }\n\n  }\n\n\n  // function to pass into components to allow users \n  //to decrease vote value by 1 through a POST req\n  _downvoteImage = (id) => {\n    console.log(`the child said it was ${id}`)\n    let loggedInUser = this.state.user_id\n    //if user is logged in?\n    if (this.state.loggedIn) {\n      //check to see if the user has voted already\n      this._doesVoteExist(this.state.user_id, id)\n        .then(didVote => {\n          if (didVote === 1) {\n            //vote does exist do nothing\n            console.log(`if statement:${didVote}`)\n          } else {\n            //vote doesnt exist\n            //let user vote =>\n            fetch('/api/downvoteimage', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({ id, loggedInUser }),\n            });\n          }\n        })\n    } else {\n      console.log('You are not logged in')\n    }\n  }\n\n}\n\nexport default ImageColumns;","import React from 'react'\n\n\nconst Login = (props) => {\n  return (\n    <form className='nav-login' action='/api/login' method='POST' >\n      <label>\n        Email address:\n      <input type='email' name='email' required />\n      </label><br />\n      <label>\n        Password:\n          <input type=\"password\" name=\"password\" required />\n      </label> <br />\n      <input type=\"submit\" value=\"submit\" />\n    </form>\n  )\n}\n\nexport default Login","import React from 'react';\n// log out button for registration Component\nconst Logout = (props) => {\n  return (\n    <form action='/logout' method='POST' >\n      <input className=\"logoutButton\" type=\"submit\" value=\"Logout\" />\n    </form>\n  )\n}\n\nexport default Logout;","import React from 'react'\n\nconst NewUser = (props) => {\n  return (\n    <form action=\"/register\" method=\"POST\">\n      <label>\n        Email address:<br />\n        <input type=\"email\" name=\"email\" required />\n      </label>\n      <br />\n      <label>\n        Display name:<br />\n        <input type=\"text\" name=\"displayName\" required />\n      </label>\n      <br />\n      Phone Number:<br />\n      <label>\n        <input type=\"text\" name=\"phoneNumber\" required />\n      </label>\n      <br />\n      <label>\n        Password:<br />\n        <input type=\"password\" name=\"password\" required />\n      </label>\n      <br />\n      <input type=\"submit\" value=\"Register\" />\n    </form >\n  )\n}\n\nexport default NewUser;","import React, { Component } from 'react';\nimport Login from './Login';\nimport Logout from './Logout';\nimport NewUser from './NewUser';\n\nclass Registration extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedIn: false,\n      displayname: '',\n      loginOpen: false,\n      registerOpen: false,\n    }\n  }\n  async componentDidMount() {\n    await fetch('/api/loggedin')\n      .catch(err => {\n        console.log(err)\n      })\n      .then(r => {\n        return (r.json());\n      })\n      .then(data => {\n        if (data) {\n          this.setState({\n            displayname: data.displayname,\n            loggedIn: true\n          })\n        } else {\n          console.log('move along');\n        }\n      })\n  }\n\n  _isClickedLogin = () => {\n    console.log(\"clicked it\")\n    this.setState({\n      loginOpen: !this.state.loginOpen\n    })\n  }\n  _isClickedRegister = () => {\n    console.log(\"clicked it\")\n    this.setState({\n      registerOpen: !this.state.registerOpen\n    })\n  }\n\n  render() {\n    return (\n      <div className='navbar'>\n        <ul className='nav-ul'>\n          <li>Naughty Or Nice 678-673-3936</li>\n          {/* {this.state.loggedIn ? <li className='nav-logout'><Logout /></li> : <><li className='nav-login'><Login /></li> <li className='nav-register'><NewUser /></li></>} */}\n          {this.state.loggedIn ? <li className='nav-logout'><Logout /></li> : <><li><button onClick={this._isClickedLogin}>Login</button></li><li>{this.state.loginOpen ? <Login /> : <></>}</li><li><button onClick={this._isClickedRegister}>Register</button></li><li>{this.state.registerOpen ? <NewUser /> : <></>}</li></>}\n          <li><i class=\"fas fa-sleigh\"></i></li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Registration;","import React, { Component } from 'react';\nimport './App.css';\n\n//IMPORTING COMPONENTS\nimport ImageColumns from './components/ImageColumns';\nimport Registration from './components/Registration';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Registration />\n        <ImageColumns />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}